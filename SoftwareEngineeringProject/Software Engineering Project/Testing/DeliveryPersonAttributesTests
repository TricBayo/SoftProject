import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class DeliveryPersonAttributesTests {

    DeliveryPersonAttributesTests deliveryPerson = new DeliveryPersonAttributesTests();

    // validate delivery person id
    @Test
    public void testValidDeliveryPersonId() {
        assertTrue(deliveryPerson.validateDeliveryPersonId("ABC123A1"));  // Valid Delivery Person ID
    }

    @Test
    public void testInvalidDeliveryPersonId_WrongFormat() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateDeliveryPersonId("ABC1234");  // Incorrect format
        });
    }

    @Test
    public void testInvalidDeliveryPersonId_MissingCharacterOrDigit() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateDeliveryPersonId("ABC123A");  // Missing digit at the end
        });
    }

    // name
    @Test
    public void testValidName() {
        assertTrue(deliveryPerson.validateName("John Doe"));  // Valid name
    }

    @Test
    public void testInvalidName_TooShort() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateName("Jo");  // Less than 3 chars
        });
    }

    @Test
    public void testInvalidName_TooLong() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateName("ThisNameIsWayTooLongToBeValid");  // More than 20 chars
        });
    }

    // postcode
    @Test
    public void testValidPostcode() {
        assertTrue(deliveryPerson.validatePostcode("N37 AO24"));  // Valid postcode
    }

    @Test
    public void testInvalidPostcode_TooShort() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePostcode("N37 A02");  // Incorrect length
        });
    }

    @Test
    public void testInvalidPostcode_WrongFormat() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePostcode("37N AO24");  // Incorrect format
        });
    }

    // phone number
    @Test
    public void testValidPhoneNumber() {
        assertTrue(deliveryPerson.validatePhoneNumber("+353 01 123 4567"));  // Valid phone number
    }

    @Test
    public void testInvalidPhoneNumber_NoCountryCode() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePhoneNumber("01 123 4567");  // Missing country code
        });
    }

    @Test
    public void testInvalidPhoneNumber_WrongFormat() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePhoneNumber("+353011234567");  // Incorrect format
        });
    }

    // area id
    @Test
    public void testValidAreaId() {
        assertTrue(deliveryPerson.validateAreaId("ABC123"));  // Valid Area ID
    }

    @Test
    public void testInvalidAreaId_WrongFormat() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateAreaId("AB1234");  // Incorrect format
        });
    }

    @Test
    public void testInvalidAreaId_SpecialCharacters() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateAreaId("ABC!23");  // Special character in Area ID
        });
    }

    // password
    @Test
    public void testValidPassword() {
        assertTrue(deliveryPerson.validatePassword("Password1!"));  // Valid password
    }

    @Test
    public void testInvalidPassword_TooShort() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePassword("Pass1!");  // Less than 8 characters
        });
    }

    @Test
    public void testInvalidPassword_TooLong() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePassword("ThisIsAVeryLongPassword123!");  // More than 15 characters
        });
    }

    @Test
    public void testInvalidPassword_NoNumberOrSpecialChar() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePassword("Password");  // Missing number or special character
        });
    }

    // delivery Person ID with special characters
    @Test
    public void testInvalidDeliveryPersonId_SpecialCharacters() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateDeliveryPersonId("ABC!23A1");  
        });
    }

    // name containing numbers
    @Test
    public void testInvalidName_ContainsNumbers() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validateName("John123");  
        });
    }

    // postcode with special characters
    @Test
    public void testInvalidPostcode_SpecialCharacters() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePostcode("N37@AO24");  
        });
    }

    // phone number with extra spaces
    @Test
    public void testInvalidPhoneNumber_ExtraSpaces() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePhoneNumber("+353  01 123 4567");  
        });
    }

    // password with only special characters
    @Test
    public void testInvalidPassword_OnlySpecialChars() {
        assertThrows(RuntimeException.class, () -> {
            deliveryPerson.validatePassword("!!!!!!!!");  
        });
    }
}
